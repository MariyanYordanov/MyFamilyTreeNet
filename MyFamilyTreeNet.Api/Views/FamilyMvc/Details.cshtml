@model MyFamilyTreeNet.Data.Models.Family
@{
    ViewData["Title"] = $"Детайли за {Model.Name}";
    var statistics = ViewBag.Statistics;
    var relationships = ViewBag.Relationships as List<MyFamilyTreeNet.Data.Models.Relationship>;
}

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="mb-0">
                        <i class="fas fa-users me-2"></i>@Model.Name
                    </h1>
                    <p class="text-muted mb-0">@(Model.Description ?? "Семейно дърво")</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary" onclick="refreshTree()">
                        <i class="fas fa-sync-alt me-1"></i>Обнови
                    </button>
                    <button class="btn btn-outline-primary" onclick="exportTree()">
                        <i class="fas fa-download me-1"></i>Експорт
                    </button>
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                        <i class="fas fa-edit me-1"></i>Редактиране
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <i class="fas fa-users fa-2x text-primary mb-2"></i>
                    <h3 class="mb-0">@statistics.TotalMembers</h3>
                    <small class="text-muted">Общо членове</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <i class="fas fa-heart fa-2x text-success mb-2"></i>
                    <h3 class="mb-0">@statistics.AliveMembers</h3>
                    <small class="text-muted">Живи</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <i class="fas fa-cross fa-2x text-secondary mb-2"></i>
                    <h3 class="mb-0">@statistics.DeceasedMembers</h3>
                    <small class="text-muted">Починали</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <i class="fas fa-layer-group fa-2x text-info mb-2"></i>
                    <h3 class="mb-0">@statistics.Generations</h3>
                    <small class="text-muted">Поколения</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Family Tree Visualization -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-sitemap me-2"></i>Семейно дърво
                        </h5>
                        <div class="d-flex gap-2">
                            <small class="text-muted me-3">
                                <i class="fas fa-circle text-success me-1"></i>Живи
                                <i class="fas fa-circle text-secondary ms-2 me-1"></i>Починали
                            </small>
                            <button class="btn btn-sm btn-outline-secondary" onclick="centerTree()">
                                <i class="fas fa-expand-arrows-alt me-1"></i>Центриране
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0" style="height: 600px; overflow: hidden; position: relative;">
                    <div id="family-tree-container" class="w-100 h-100" style="border: 1px solid #eee;"></div>
                    
                    @if (!Model.FamilyMembers.Any())
                    {
                        <div class="position-absolute top-50 start-50 translate-middle text-center">
                            <i class="fas fa-users fa-4x text-muted mb-3"></i>
                            <h4>Няма добавени членове</h4>
                            <p class="text-muted">Започнете като добавите първия член на семейството.</p>
                            <a asp-controller="MemberMvc" asp-action="Create" asp-route-familyId="@Model.Id" class="btn btn-primary">
                                <i class="fas fa-user-plus me-1"></i>Добави член
                            </a>
                        </div>
                    }
                </div>
                
                @if (Model.FamilyMembers.Any())
                {
                    <div class="card-footer bg-light">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <small class="text-muted">
                                    Кликнете върху член за да видите неговия профил. Използвайте мишката за навигация в дървото.
                                </small>
                            </div>
                            <div class="col-md-6 text-end">
                                <a asp-controller="MemberMvc" asp-action="Create" asp-route-familyId="@Model.Id" class="btn btn-sm btn-primary">
                                    <i class="fas fa-user-plus me-1"></i>Добави член
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Members List -->
    @if (Model.FamilyMembers.Any())
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-list me-2"></i>Всички членове
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @foreach (var member in Model.FamilyMembers.OrderBy(m => m.FirstName))
                            {
                                <div class="col-lg-3 col-md-4 col-sm-6">
                                    <div class="card border-0 bg-light h-100">
                                        <div class="card-body p-3">
                                            <div class="d-flex align-items-center">
                                                <div class="rounded-circle d-flex align-items-center justify-content-center me-3" 
                                                     style="width: 40px; height: 40px; color: white; font-weight: bold; background-color: @(member.DateOfDeath == null ? "#28a745" : "#6c757d")">
                                                    @(member.FirstName.Substring(0, 1))@(member.LastName.Substring(0, 1))
                                                </div>
                                                <div class="flex-grow-1">
                                                    <h6 class="mb-1">
                                                        <a asp-controller="MemberMvc" asp-action="Details" asp-route-id="@member.Id" class="text-decoration-none">
                                                            @member.FirstName @member.MiddleName @member.LastName
                                                        </a>
                                                    </h6>
                                                    @if (member.DateOfBirth != null)
                                                    {
                                                        <small class="text-muted">
                                                            @if (member.DateOfDeath != null)
                                                            {
                                                                @($"{member.DateOfBirth.Value.Year} - {member.DateOfDeath.Value.Year}")
                                                            }
                                                            else
                                                            {
                                                                @($"р. {member.DateOfBirth.Value.Year}")
                                                            }
                                                        </small>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script>
        let svg, g, zoom;
        const familyId = @Model.Id;

        document.addEventListener('DOMContentLoaded', function() {
            renderFamilyTree();
        });

        async function renderFamilyTree() {
            try {
                const response = await fetch(`/FamilyMvc/GetFamilyTreeData/${familyId}`);
                const treeData = await response.json();
                
                if (treeData.error) {
                    console.error('Error loading tree data:', treeData.error);
                    return;
                }

                drawTree(treeData);
            } catch (error) {
                console.error('Error loading family tree:', error);
            }
        }

        function drawTree(treeData) {
            const container = document.getElementById('family-tree-container');
            if (!container) return;

            container.innerHTML = '';

            const width = container.offsetWidth;
            const height = 600;

            svg = d3.select(container)
                .append('svg')
                .attr('width', width)
                .attr('height', height)
                .attr('class', 'family-tree-svg');

            g = svg.append('g');

            zoom = d3.zoom()
                .scaleExtent([0.1, 3])
                .on('zoom', (event) => {
                    g.attr('transform', event.transform);
                });

            svg.call(zoom);

            const root = d3.hierarchy(treeData, d => d.children);
            
            const treeLayout = d3.tree()
                .size([height - 100, width - 200]);

            treeLayout(root);

            // Links
            const links = g.selectAll('.link')
                .data(root.links())
                .enter()
                .append('path')
                .attr('class', 'link')
                .attr('d', d3.linkHorizontal()
                    .x(d => d.y + 100)
                    .y(d => d.x + 50)
                )
                .style('fill', 'none')
                .style('stroke', '#ccc')
                .style('stroke-width', 2);

            // Nodes
            const nodes = g.selectAll('.node')
                .data(root.descendants())
                .enter()
                .append('g')
                .attr('class', 'node')
                .attr('transform', d => `translate(${d.y + 100}, ${d.x + 50})`)
                .style('cursor', 'pointer')
                .on('click', function(event, d) {
                    if (d.data.id) {
                        window.open(`/MemberMvc/Details/${d.data.id}`, '_blank');
                    }
                });

            // Node circles
            nodes.append('circle')
                .attr('r', 25)
                .style('fill', d => d.data.isAlive ? '#28a745' : '#6c757d')
                .style('stroke', '#fff')
                .style('stroke-width', 3);

            // Node initials
            nodes.append('text')
                .attr('dy', '0.35em')
                .attr('text-anchor', 'middle')
                .style('font-size', '10px')
                .style('font-weight', 'bold')
                .style('fill', 'white')
                .text(d => {
                    const names = d.data.name.split(' ');
                    return names[0].substring(0, 1) + (names[1] ? names[1].substring(0, 1) : '');
                });

            // Node labels
            nodes.append('text')
                .attr('x', 35)
                .attr('dy', '-10px')
                .style('font-size', '12px')
                .style('font-weight', 'bold')
                .text(d => d.data.name);

            nodes.append('text')
                .attr('x', 35)
                .attr('dy', '5px')
                .style('font-size', '10px')
                .style('fill', '#666')
                .text(d => {
                    if (d.data.birthYear) {
                        return d.data.isAlive ? `р. ${d.data.birthYear}` : `${d.data.birthYear} - ${d.data.deathYear || '?'}`;
                    }
                    return '';
                });

            nodes.append('text')
                .attr('x', 35)
                .attr('dy', '20px')
                .style('font-size', '9px')
                .style('fill', '#999')
                .text(d => d.data.age ? `${d.data.age} г.` : '');

            // Center the tree
            centerTree();
        }

        function centerTree() {
            if (!svg || !g) return;
            
            const bounds = g.node().getBBox();
            const parent = svg.node().parentElement;
            const fullWidth = parent.clientWidth;
            const fullHeight = parent.clientHeight;
            const width = bounds.width;
            const height = bounds.height;
            const midX = bounds.x + width / 2;
            const midY = bounds.y + height / 2;
            
            const scale = 0.8 / Math.max(width / fullWidth, height / fullHeight);
            const translate = [fullWidth / 2 - scale * midX, fullHeight / 2 - scale * midY];
            
            svg.transition()
                .duration(750)
                .call(zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));
        }

        function refreshTree() {
            renderFamilyTree();
        }

        function exportTree() {
            const svgElement = document.querySelector('.family-tree-svg');
            if (svgElement) {
                const svgData = new XMLSerializer().serializeToString(svgElement);
                const svgBlob = new Blob([svgData], {type: 'image/svg+xml;charset=utf-8'});
                const svgUrl = URL.createObjectURL(svgBlob);
                const downloadLink = document.createElement('a');
                downloadLink.href = svgUrl;
                downloadLink.download = '@Model.Name-tree.svg';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
            }
        }

        // Window resize handler
        window.addEventListener('resize', function() {
            setTimeout(renderFamilyTree, 250);
        });
    </script>

    <style>
        .family-tree-svg {
            background: linear-gradient(45deg, #f8f9fa 25%, transparent 25%),
                        linear-gradient(-45deg, #f8f9fa 25%, transparent 25%),
                        linear-gradient(45deg, transparent 75%, #f8f9fa 75%),
                        linear-gradient(-45deg, transparent 75%, #f8f9fa 75%);
            background-size: 20px 20px;
            background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
        }

        .node {
            transition: all 0.3s ease;
        }

        .node:hover {
            transform: scale(1.1);
        }

        .node:hover circle {
            stroke-width: 4;
            filter: brightness(1.1);
        }

        .link {
            transition: stroke-width 0.3s ease;
        }

        #family-tree-container {
            cursor: grab;
        }

        #family-tree-container:active {
            cursor: grabbing;
        }
    </style>
}